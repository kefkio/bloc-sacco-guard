/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LoanManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "createLoan"
      | "disburse"
      | "loans"
      | "nextId"
      | "owner"
      | "renounceOwnership"
      | "repay"
      | "requestLoan"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Applied"
      | "Approved"
      | "Disbursed"
      | "OwnershipTransferred"
      | "Repaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disburse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "requestLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disburse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AppliedEvent {
  export type InputTuple = [
    id: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisbursedEvent {
  export type InputTuple = [
    id: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    id: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LoanManager extends BaseContract {
  connect(runner?: ContractRunner | null): LoanManager;
  waitForDeployment(): Promise<this>;

  interface: LoanManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  createLoan: TypedContractMethod<
    [borrower: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  disburse: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint] & {
        borrower: string;
        amount: bigint;
        approved: boolean;
        disbursed: boolean;
        repaid: bigint;
      }
    ],
    "view"
  >;

  nextId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  requestLoan: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLoan"
  ): TypedContractMethod<
    [borrower: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disburse"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint] & {
        borrower: string;
        amount: bigint;
        approved: boolean;
        disbursed: boolean;
        repaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "requestLoan"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Applied"
  ): TypedContractEvent<
    AppliedEvent.InputTuple,
    AppliedEvent.OutputTuple,
    AppliedEvent.OutputObject
  >;
  getEvent(
    key: "Approved"
  ): TypedContractEvent<
    ApprovedEvent.InputTuple,
    ApprovedEvent.OutputTuple,
    ApprovedEvent.OutputObject
  >;
  getEvent(
    key: "Disbursed"
  ): TypedContractEvent<
    DisbursedEvent.InputTuple,
    DisbursedEvent.OutputTuple,
    DisbursedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;

  filters: {
    "Applied(uint256,address,uint256)": TypedContractEvent<
      AppliedEvent.InputTuple,
      AppliedEvent.OutputTuple,
      AppliedEvent.OutputObject
    >;
    Applied: TypedContractEvent<
      AppliedEvent.InputTuple,
      AppliedEvent.OutputTuple,
      AppliedEvent.OutputObject
    >;

    "Approved(uint256)": TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;
    Approved: TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;

    "Disbursed(uint256,address,uint256)": TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;
    Disbursed: TypedContractEvent<
      DisbursedEvent.InputTuple,
      DisbursedEvent.OutputTuple,
      DisbursedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Repaid(uint256,address,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
  };
}
